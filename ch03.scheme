;;; ex 3.1
(define (make-accumulator initial)
  (lambda (acc)
    (begin
      (set! initial (+ initial acc))
      initial)))

(define acc (make-accumulator 10))

(acc 20)

;;; ex 3.2

(define (make-monitored func)
  (let ((count 0))
    (lambda (arg)
      (cond
       ((eq? arg 'how-many-calls) count)
       ((eq? arg 'reset-count) (set! count 0))
       (else (set! count (+ count 1)) (func arg))))))

(define s (make-monitored sqrt))

(s 100)

(s 'how-many-calls)
(s 'reset-count)

;;; ex 3.3 and ex 3.4
(define (make-account balance passwd)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch-method method)
    (cond ((eq? method 'withdraw) withdraw)
          ((eq? method 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT" method))))
  (let ((fail_count 0))
    (lambda (pass method)
      (cond ((eq? pass passwd)
             (set! fail_count 0)
             (dispatch-method method))
            (else
             (set! fail_count (+ fail_count 1))
             (if
              (= fail_count 7)
              (call-the-cops)
              "Incorrect password"))))))

(define acc (make-account 10 'password))

((acc 'password 'deposit) 20)

;;; ex 3.5

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (integral-test)
    (P
     (random-in-range x1 x2)
     (random-in-range y1 y2)))
  (define (area)
    (abs (* (- x1 x2) (- y1 y2))))
  (* (area) (monte-carlo trials integral-test)))

(define (P x y)
  (<= (+ (* (- x 5) (- x 5)) (* (- y 7) (- y 7))) 9))

(estimate-integral P 2.0 8.0 4.0 10.0 100000)

(* 3 3 3.1415926)

;;; ex 3.6
(define rand
  (let ((x random-init))
    (define (dispatch message)
      (cond ((eq? message 'generate)
             (begin (set! x (rand-update x))
                    x))
            ((eq? message 'reset)
             (lambda (new-value) (set! x new-value)))))
    dispatch))

(define random-init 0)
(define (rand-update x) (+ x 1))


;;; ex 3.7

;;; pass calls to old acc.

;;; ex 3.8

(define f
  (let ((initial 0))
    (lambda (i)
      (cond ((= i 0) initial)
            (else
             (set! initial 1)
             0)))))


;;; ex 3.12
(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)

(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))
z
(cdr x)

(define w (append! x y))
w
(cdr x)

;;; ex 3.13

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

(define z (make-cycle (list 'a 'b 'c)))

;;; ex 3.14
(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))

;;; reverse
(define v '(a b c d))
(define w (mystery '(a b c d)))

;;; ex 3.16

(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))

(define second (cons 'a 'b)) 
(define third (cons 'a 'b)) 
(define first (cons second third)) 
(set-car! third second) 
(count-pairs first)  ;; => 4 

(define third (cons 'a 'b)) 
(define second (cons third third)) 
(define first (cons second second))

(count-pairs first)  ;; => 7

(define lst (list 'a 'b 'c)) 
(set-cdr! (cddr lst) lst) 
(count-pairs lst)  ;; never returns

;;; ex 3.17

(define false #f)
(define true #t)

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (count-pairs-refine x)
  (define (count-pairs-refine-iter x seen)
    (if (or (not (pair? x)) (element-of-set? x seen))
        0
        (+ (count-pairs-refine-iter (car x) (cons x seen))
           (count-pairs-refine-iter (cdr x) (cons (car x) (cons x seen)))
           1)))
  (count-pairs-refine-iter x '()))

;;; ex 3.18
(define (contain-cycle? x)
  (define (contain-cycle?-iter x seen)
    (cond
     ((null? x) #f)
     ((element-of-set? x seen) #t)
     (else (contain-cycle?-iter (cdr x) (cons x seen)))))
  (contain-cycle?-iter x '()))

;;; ex 3.19
(define (contain-cycle? x)
  (define (step-one x)
    (if (pair? x)
        (cdr x)
        '()))
  (define (run fast slow)
    (let ((new-fast (step-one (step-one fast)))
          (new-slow (step-one slow)))
      (cond
       ((null? new-fast) #f)
       ((equal? new-fast new-slow) #t)
       (else (run new-fast new-slow)))))
  (run x x))


;;; ex 3.50
(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (stream-cons
       (apply proc (map stream-car argstreams))
       (apply stream-map
              (cons proc (map stream-cdr argstreams))))))

;;; ex 3.51

